import Foundation
import HealthKit

extension Metadata {

    /**
     A key that indicates the version number of the algorithm used to calculate the sample’s value.

     - Note: In watchOS 8, the system uses this key for ``HeartRateVariabilitySDNN`` and ``HKHeartbeatSeriesSample`` samples generated by Apple Watch.

     - String value: `HKAlgorithmVersion`
     - HealthKit Constant: ``HKMetadataKeyAlgorithmVersion``
     */
    var algorithmVersion: Int? {
        get { integer(for: .algorithmVersion) }
        set { set(number: newValue, for: .algorithmVersion) }
    }

    /**
     The key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample.

     This key takes a Boolean value.
     If it’s true, the system has enough high-quality data to make an accurate estimate.
     If it’s false, the system provides an estimate based on data that may be less accurate.

     The key is read-only.

     - String value: `HKMetadataKeyAppleDeviceCalibrated`
     - HealthKit Constant: ``HKMetadataKeyAppleDeviceCalibrated``
     */
    var appleDeviceCalibrated: Bool? {
        self.value(for: .appleDeviceCalibrated)
    }

    /**
     A key for metadata indicating the version number of the algorithm Apple Watch uses to generate an ECG reading.

     Apple Watch sets this key on the ``HKElectrocardiogram`` samples it creates. 
     The key is read-only.
     - String value: `HKMetadataKeyAppleECGAlgorithmVersion`
     - HealthKit Constant: ``HKMetadataKeyAppleECGAlgorithmVersion``
     */
    var appleECGAlgorithmVersion: Int? {
        value(for: .appleECGAlgorithmVersion)
    }

    /**
     The audio level associated with an audio event.

     Use this key on audio exposure events.
     It takes an ``HKQuantity`` containing the audio level measured in ``decibelAWeightedSoundPressureLevel()`` units.

     - Value type: ``Quantity``, unit dBASPL
     - String value: `HKMetadataKeyAudioExposureLevel`
     - HealthKit Constant: ``HKMetadataKeyAudioExposureLevel``
     */
    var audioExposureLevel: HKQuantity? {
        get { value(for: .audioExposureLevel) }
        set { set(value: newValue, for: .audioExposureLevel) }
    }

    /**
     A unique identifier for an HKObject that is set by its source.

     This key takes a ``String`` value.
     This value is independent of the UUID assigned to the object by the HealthKit store.
     You can assign your own UUID to any HealthKit objects you create.
     Use these IDs to uniquely identify objects in your application.
     You typically use the UUID from the corresponding data entry on your server.
     This lets you create multiple copies of that data across multiple devices.
     Each copy shares the same external UUID.

     - String value: `HKExternalUUID`
     - HealthKit Constant: ``HKMetadataKeyExternalUUID``
     */
    var externalUUID: UUID? {
        get {
            guard let uuidString: String = value(for: .externalUUID) else {
                return nil
            }
            return .init(uuidString: uuidString)
        }
        set { set(value: newValue?.uuidString, for: .externalUUID) }
    }

    /**
     Represents the activity type related to the sample.

     - String value: `HKActivityType`
     - HealthKit Constant: ``HKMetadataKeyActivityType``
     */
    @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
    var workoutActivityType: HKWorkoutActivityType? {
        get {
            guard let rawValue: Int = value(for: .activityType) else {
                return nil
            }
            return .init(rawValue: UInt(rawValue))
        }
        set { set(value: newValue.map { Int($0.rawValue) }, for: .activityType) }
    }
}

extension Metadata? {

    func adding(uuid: UUID?) -> Metadata? {
        guard let uuid else {
            return self
        }
        var result = self ?? [:]
        result[.externalUUID] = uuid.uuidString
        return result
    }
}
