import Foundation
import HealthKit

extension Metadata {

    /**
     Represents the activity type related to the sample.

     - String value: `HKActivityType`
     - HealthKit Constant: ``HKMetadataKeyActivityType``
     */
    @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
    public var activityType: HKWorkoutActivityType? {
        get { uintType(for: .activityType) }
        set { set(uint: newValue, for: .activityType) }
    }

    /**
     The percent slope of a ski run.

     Set this key on quantity samples that represent distance, or on workout segments.
     Set its value to an ``HKQuantity`` object with a percent unit, where 100% indicates a 45 degree slope.

     HealthKit assigns this metadata field to the segments it automatically creates for ``HKWorkoutActivityType.downhillSkiing`` and ``HKWorkoutActivityType.snowboarding`` workout sessions (Apple Watch Series 3 only).
     - String value: `HKAlpineSlopeGrade`
     - HealthKit Constant: ``HKMetadataKeyAlpineSlopeGrade``
     */
    public var alpineSlopeGrade: HKQuantity? {
        get { quantity(for: .alpineSlopeGrade) }
        set { self.set(quantity: newValue, for: .alpineSlopeGrade) }
    }

    /**
     Indicates the version number of the algorithm used to calculate the sample’s value.

     - Note: In watchOS 8, the system uses this field for ``HeartRateVariabilitySDNN`` and ``HKHeartbeatSeriesSample`` samples generated by Apple Watch.

     - String value: `HKAlgorithmVersion`
     - HealthKit Constant: ``HKMetadataKeyAlgorithmVersion``
     */
    public var algorithmVersion: Int? {
        get { integer(for: .algorithmVersion) }
        set { set(number: newValue, for: .algorithmVersion) }
    }

    /**
     The key for metadata indicating whether the system had data from a sufficient amount of calibrated sensors when recording the sample.

     This key takes a Boolean value.
     If it’s true, the system has enough high-quality data to make an accurate estimate.
     If it’s false, the system provides an estimate based on data that may be less accurate.

     The key is read-only.

     - String value: `HKMetadataKeyAppleDeviceCalibrated`
     - HealthKit Constant: ``HKMetadataKeyAppleDeviceCalibrated``
     */
    public var appleDeviceCalibrated: Bool? {
        self.value(for: .appleDeviceCalibrated)
    }

    /**
     A key for metadata indicating the version number of the algorithm Apple Watch uses to generate an ECG reading.

     Apple Watch sets this key on the ``HKElectrocardiogram`` samples it creates. 
     The key is read-only.
     - String value: `HKMetadataKeyAppleECGAlgorithmVersion`
     - HealthKit Constant: ``HKMetadataKeyAppleECGAlgorithmVersion``
     */
    public var appleECGAlgorithmVersion: Int? {
        value(for: .appleECGAlgorithmVersion)
    }

    /**
     The audio exposure event’s duration.

     Use this field on headphone audio exposure events.
     It takes an ``HKQuantity`` containing the audio level measured in units of time.

     - String value: `HKMetadataKeyAudioExposureDuration`
     - HealthKit Constant: ``HKMetadataKeyAudioExposureDuration``
     */
    public var audioExposureDuration: HKQuantity? {
        get { quantity(for: .audioExposureDuration) }
        set { set(quantity: newValue, for: .audioExposureDuration) }
    }

    /**
     The audio level associated with an audio event.

     Use this key on audio exposure events.
     It takes an ``HKQuantity`` containing the audio level measured in ``decibelAWeightedSoundPressureLevel()`` units.

     - Value type: ``Quantity``, unit dBASPL
     - String value: `HKMetadataKeyAudioExposureLevel`
     - HealthKit Constant: ``HKMetadataKeyAudioExposureLevel``
     */
    public var audioExposureLevel: HKQuantity? {
        get { value(for: .audioExposureLevel) }
        set { set(value: newValue, for: .audioExposureLevel) }
    }

    /**
     Represents the average METs, or Metabolic Equivalent of Task during a workout.

     The expected value type is an ``HKQuantity`` expressed in a METs (`kcal/(kg*hr)`) unit.
     This field may be set on an ``HKWorkout`` object to represent the average workout intensity represented as METs over the entire workout duration.

     - String value: `HKAverageMETs`
     - HealthKit Constant: ``HKMetadataKeyAverageMETs``
     */
    public var averageMETs: HKQuantity? {
        get { quantity(for: .averageMETs) }
        set { set(quantity: newValue, for: .averageMETs) }
    }

    /**
     A field that indicates the average speed during a workout.

     Set this field on a workout, workout segment, or a quantity sample that represents distance.
     Set its value to an ``HKQuantity`` object with a length/time unit (for example, m/s).
     For more information on creating complex units, see [Performing unit math](https://developer.apple.com/documentation/healthkit/hkunit#1677276).

     HealthKit assigns this metadata key to the segments it automatically creates for ``HKWorkoutActivityType.downhillSkiing`` and ``HKWorkoutActivityType.snowboarding`` workout sessions (Apple Watch Series 3 only).
     - Note: This value represents the average speed while moving.
     It may not be the same as the value you get when dividing a distance sample’s distance by its duration.
     - String value: `HKAverageSpeed`
     - HealthKit Constant: ``HKMetadataKeyAverageSpeed``
     */
    public var averageSpeed: HKQuantity? {
        get { quantity(for: .averageSpeed) }
        set { set(quantity: newValue, for: .averageSpeed) }
    }

    /**
     Represents the barometric pressure recorded at the time of a sample.

     The expected value type is an ``HKQuantity`` representing a value in units of pressure (atmospheres, pascals, millimeters of Mercury).
     - String value: `HKMetadataKeyBarometricPressure`
     - HealthKit Constant: ``HKMetadataKeyBarometricPressure``
     */
    public var barometricPressure: HKQuantity? {
        get { quantity(for: .barometricPressure) }
        set { set(quantity: newValue, for: .barometricPressure) }
    }

    /**
     A field that indicates the relative timing of a blood glucose reading to a meal.

     Set this field on a `bloodGlucose` sample.
     Medical professionals can use the relative meal time to help determine the acceptable range for a blood glucose reading.
     If your app requires more precise timing or additional information about the meal's composition, create samples to record those details (for example, a `dietaryCarbohydrates` sample with the exact meal time).
     - Value type: ``NSNumber`` for a ``HKBloodGlucoseMealTime``
     - String value: `HKBloodGlucoseMealTime`
     - HealthKit Constant: ``HKMetadataKeyBloodGlucoseMealTime``
     */
    public var bloodGlucoseMealTime: HKBloodGlucoseMealTime? {
        get { integerType(for: .bloodGlucoseMealTime) }
        set { set(int: newValue, for: .bloodGlucoseMealTime) }
    }

    /**
     The location where a specific body temperature reading was taken.

     This key takes an ``NSNumber`` object whose value is ``HKBodyTemperatureSensorLocation``.
     - Value type: ``NSNumber``
     - String value: `HKBodyTemperatureSensorLocation`
     - HealthKit Constant: ``HKMetadataKeyBodyTemperatureSensorLocation``
     */
    public var bodyTemperatureSensorLocation: HKBodyTemperatureSensorLocation? {
        get { integerType(for: .bodyTemperatureSensorLocation) }
        set { set(int: newValue, for: .bodyTemperatureSensorLocation) }
    }

    /**
     A key that indicates whether the workout was performed with a coach or personal trainer.

     Set this key’s value to true if the workout was performed with a coach or personal trainer; otherwise, set it to false.
     - String value: `HKCoachedWorkout`
     - HealthKit Constant: ``HKMetadataKeyCoachedWorkout``
     */
    public var coachedWorkout: Bool? {
        get { value(for: .coachedWorkout) }
        set { set(value: newValue, for: .coachedWorkout) }
    }

    /**
     The workout distance displayed by a connected GymKit cross-trainer machine.

     Set this field on a workout sample representing exercise on a GymKit cross-trainer machine (such as an elliptical cross-trainer).
     Set its value to an ``HKQuantity`` object with a length unit.
     - Value type: ``HKQuantity``
     - String value: `HKCrossTrainerDistance`
     - HealthKit Constant: ``HKMetadataKeyCrossTrainerDistance``
     */
    public var crossTrainerDistance: HKQuantity? {
        get { quantity(for: .crossTrainerDistance) }
        set { set(quantity: newValue, for: .crossTrainerDistance) }
    }

    /**
     Represents the test used to determine a Cycling Functional Threshold Power value.

     - String value: `HKCyclingCyclingFunctionalThresholdPowerTestType`
     - HealthKit Constant: ``HKMetadataKeyCyclingFunctionalThresholdPowerTestType``
     */
    @available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
    public var cyclingFunctionalThresholdPowerTestType: HKCyclingFunctionalThresholdPowerTestType? {
        get { integerType(for: .cyclingFunctionalThresholdPowerTestType) }
        set { set(int: newValue, for: .cyclingFunctionalThresholdPowerTestType) }
    }

    /**
     The earliest date of data used to calculate the sample’s estimated value.

     This field indicates the earliest date from the data used by HealthKit to calculate the sample’s value.
     - String value: `HKDateOfEarliestDataUsedForEstimate`
     - HealthKit Constant: ``HKMetadataKeyDateOfEarliestDataUsedForEstimate``
     */
    public var dateOfEarliestDataUsedForEstimate: Date? {
        get { value(for: .dateOfEarliestDataUsedForEstimate) }
        set { set(value: newValue, for: .dateOfEarliestDataUsedForEstimate) }
    }

    /**
     The name of the manufacturer of the device that took this reading.

     - Note: In iOS 9.0 and later, the use of this key is discouraged. 
     Use the ``HKDevice`` class instead.
     - String value: `HKMetadataKeyDeviceManufacturerName`
     - HealthKit Constant: ``HKMetadataKeyDeviceManufacturerName``
     */
    public var deviceManufacturerName: String? {
        get { value(for: .deviceManufacturerName) }
        set { set(value: newValue, for: .deviceManufacturerName) }
    }

    /**
     The name of the device that took this reading.

     - Note: In iOS 9.0 and later, the use of this key is discouraged. 
     Use the ``HKDevice`` class instead.
     - String value: `HKDateOfEarliestDataUsedForEstimate`
     - HealthKit Constant: ``HKMetadataKeyDeviceName``
     */
    public var deviceName: String? {
        get { value(for: .deviceName) }
        set { set(value: newValue, for: .deviceName) }
    }

    /**
     The field indicating the placement of the device that measured a sample.

     For mobility samples, like ``walkingSpeed`` or ``walkingDoubleSupportPercentage``, this metadata field records the placement of the device as determined by the system.
     - String value: `HKMetadataKeyDevicePlacementSide`
     - HealthKit Constant: ``HKMetadataKeyDevicePlacementSide``
     */
    public var devicePlacementSide: HKDevicePlacementSide? {
        get { integerType(for: .devicePlacementSide) }
        set { set(int: newValue, for: .devicePlacementSide) }
    }

    /**
     The field for the serial number of the device that generated the data.

     - String value: `HKDeviceSerialNumber`
     - HealthKit Constant: ``HKMetadataKeyDeviceSerialNumber``
     */
    public var deviceSerialNumber: String? {
        get { value(for: .deviceSerialNumber) }
        set { set(value: newValue, for: .deviceSerialNumber) }
    }

    /**
     A digital signature that can be used to validate the origin of the HealthKit object.

     The digital signature is intended to provide data integrity for sample data produced by trusted (tamper resistant) measuring devices.
     Use the Cryptographic Message Syntax (CMS) to sign data returned by your device (such as timestamps, values, and so forth) using ASN.1 encoding with Distinguished Encoding Rules (DER).
     The entire signature should be further encoded using base64.
     Recommended digest is SHA256, and recommended cipher is FIPS PUB 186-4 Digital Signature Standard Elliptic Curve P-256.
     CMS is specified in IETF RFC 5652.
     For more information, see [Adding Digital Signatures in HealthKit]().
     - String value: `HKDigitalSignature`
     - HealthKit Constant: ``HKMetadataKeyDigitalSignature``
     */
    public var digitalSignature: String? {
        get { value(for: .digitalSignature) }
        set { set(value: newValue, for: .digitalSignature) }
    }

    /**
     Represents the cumulative elevation ascent during a workout.

     The expected value type is an ``HKQuantity`` object compatible with length unit.
     This field may be set on a workout, workout segments or distance samples.
     - String value: `HKElevationAscended`
     - HealthKit Constant: ``HKMetadataKeyElevationAscended``
     */
    public var elevationAscended: HKQuantity? {
        get { quantity(for: .elevationAscended) }
        set { set(quantity: newValue, for: .elevationAscended) }
    }

    /**
     A unique identifier for an HKObject that is set by its source.

     This key takes a ``String`` value.
     This value is independent of the UUID assigned to the object by the HealthKit store.
     You can assign your own UUID to any HealthKit objects you create.
     Use these IDs to uniquely identify objects in your application.
     You typically use the UUID from the corresponding data entry on your server.
     This lets you create multiple copies of that data across multiple devices.
     Each copy shares the same external UUID.

     - String value: `HKExternalUUID`
     - HealthKit Constant: ``HKMetadataKeyExternalUUID``
     */
    public var externalUUID: UUID? {
        get {
            guard let uuidString: String = value(for: .externalUUID) else {
                return nil
            }
            return .init(uuidString: uuidString)
        }
        set { set(value: newValue?.uuidString, for: .externalUUID) }
    }


}

extension Metadata? {

    func adding(uuid: UUID?) -> Metadata? {
        guard let uuid else {
            return self
        }
        var result = self ?? [:]
        result[.externalUUID] = uuid.uuidString
        return result
    }
}
